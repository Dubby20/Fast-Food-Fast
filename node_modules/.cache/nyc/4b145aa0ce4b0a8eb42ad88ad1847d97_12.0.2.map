{"version":3,"sources":["OrderController.js"],"names":["orderValidator","OrderValidator","OrderControllers","request","response","orders","status","send","json","message","getId","find","item","orderId","parseInt","params","id","foodItemsID","foodItems","map","food","foodId","addOrders","length","userId","body","totalPrice","dateOrdered","Date","push","orderStatus","indexOf"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAKA,IAAMA,iBAAiB,IAAIC,8BAAJ,EAAvB;;IACMC,gB;;;;;;;8BACaC,O,EAASC,Q,EAAU;AAClC,UAAI,CAACC,gBAAL,EAAa,OAAOD,SAASE,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B,oBAA1B,CAAP;AACb,aAAOH,SAASE,MAAT,CAAgB,GAAhB,EAAqBE,IAArB,CAA0B;AAC/BH,gCAD+B;AAE/BI,iBAAS;AAFsB,OAA1B,CAAP;AAID;;;+BAEiBN,O,EAASC,Q,EAAU;AACnC,UAAMM,QAAQL,iBAAOM,IAAP,CAAY;AAAA,eAAQC,KAAKC,OAAL,KAAiBC,SAASX,QAAQY,MAAR,CAAeC,EAAxB,EAA4B,EAA5B,CAAzB;AAAA,OAAZ,CAAd;AACA,UAAI,CAACN,KAAL,EAAY;AACf,eAAON,SAASE,MAAT,CAAgB,GAAhB,EAAqBE,IAArB,CAA0B;AAC5BC,mBAAS;AADmB,SAA1B,CAAP;AAGA;AACG,UAAMQ,cAAcP,MAAMQ,SAAN,CAAgBC,GAAhB,CAAoB;AAAA,eAAQP,KAAKI,EAAb;AAAA,OAApB,CAApB;AACA,UAAME,YAAYD,YAAYE,GAAZ,CAAgB;AAAA,eAAMC,eAAKT,IAAL,CAAU;AAAA,iBAAQC,KAAKS,MAAL,KAAgBL,EAAxB;AAAA,SAAV,CAAN;AAAA,OAAhB,CAAlB;AACAN,YAAMQ,SAAN,GAAkBA,SAAlB;AACA,aAAOd,SAASE,MAAT,CAAgB,GAAhB,EAAqBE,IAArB,CAA0B;AAC/BE,oBAD+B;AAE/BD,iBAAS;AAFsB,OAA1B,CAAP;AAID;;;+BAEiBN,O,EAASC,Q,EAAU;AACnC,UAAMkB,YAAY;AAChBT,iBAASR,iBAAOkB,MAAP,GAAgB,CADT;AAEhBC,gBAAQrB,QAAQsB,IAAR,CAAaD,MAFL;AAGhBN,mBAAWf,QAAQsB,IAAR,CAAaP,SAHR;AAIhBQ,oBAAYvB,QAAQsB,IAAR,CAAaC,UAJT;AAKhBC,qBAAa,IAAIC,IAAJ,EALG;AAMhBtB,gBAAQH,QAAQsB,IAAR,CAAanB;AANL,OAAlB;AAQAD,uBAAOwB,IAAP,CAAYP,SAAZ;AACA,aAAOlB,SAASE,MAAT,CAAgB,GAAhB,EAAqBE,IAArB,CAA0B;AAC/Bc,4BAD+B;AAE/Bb,iBAAS;AAFsB,OAA1B,CAAP;AAID;;;iCAEmBN,O,EAASC,Q,EAAU;AACrC,UAAM0B,cAAczB,iBAAOM,IAAP,CAAY;AAAA,eAAQC,KAAKC,OAAL,KAAiBC,SAASX,QAAQY,MAAR,CAAeC,EAAxB,EAA4B,EAA5B,CAAzB;AAAA,OAAZ,CAApB;AACA,UAAI,CAACc,WAAL,EAAkB;AAChB,eAAO1B,SAASE,MAAT,CAAgB,GAAhB,EAAqBE,IAArB,CAA0B;AAC/BC,mBAAS;AADsB,SAA1B,CAAP;AAGD;AACD,UAAMO,KAAKX,iBAAO0B,OAAP,CAAeD,WAAf,CAAX;AACAA,kBAAYxB,MAAZ,GAAqBH,QAAQsB,IAAR,CAAanB,MAAlC;AACAD,uBAAOW,EAAP,IAAac,WAAb;AACA,aAAO1B,SAASE,MAAT,CAAgB,GAAhB,EAAqBE,IAArB,CAA0B;AAC/BsB,gCAD+B;AAE/BrB,iBAAS;AAFsB,OAA1B,CAAP;AAID;;;;;;kBAGYP,gB","file":"OrderController.js","sourceRoot":"/home/dubby/Documents/Tasks/fast-food-fast/Fast-Food-Fast/Api/controllers","sourcesContent":["import orders from '../models/orders';\nimport food from '../models/food';\nimport user from '../models/user';\nimport {\n  OrderValidator\n} from '../Helpers/ValidateOrders';\n\n\nconst orderValidator = new OrderValidator();\nclass OrderControllers {\n  static allOrders(request, response) {\n    if (!orders) return response.status(404).send('No order was found');\n    return response.status(200).json({\n      orders,\n      message: 'Get all orders is successful'\n    });\n  }\n\n  static getOrderId(request, response) {\n    const getId = orders.find(item => item.orderId === parseInt(request.params.id, 10));\n    if (!getId) {\n return response.status(404).json({\n      message: 'The order with the given ID was not found'\n    });\n}\n    const foodItemsID = getId.foodItems.map(item => item.id);\n    const foodItems = foodItemsID.map(id => food.find(item => item.foodId === id));\n    getId.foodItems = foodItems;\n    return response.status(200).json({\n      getId,\n      message: 'Get a specific order is successful'\n    });\n  }\n\n  static postOrders(request, response) {\n    const addOrders = {\n      orderId: orders.length + 1,\n      userId: request.body.userId,\n      foodItems: request.body.foodItems,\n      totalPrice: request.body.totalPrice,\n      dateOrdered: new Date(),\n      status: request.body.status\n    };\n    orders.push(addOrders);\n    return response.status(201).json({\n      addOrders,\n      message: 'Orders added successfully'\n    });\n  }\n\n  static updateStatus(request, response) {\n    const orderStatus = orders.find(item => item.orderId === parseInt(request.params.id, 10));\n    if (!orderStatus) {\n      return response.status(404).json({\n        message: 'The status with the given order ID is not found'\n      });\n    }\n    const id = orders.indexOf(orderStatus);\n    orderStatus.status = request.body.status;\n    orders[id] = orderStatus;\n    return response.status(200).json({\n      orderStatus,\n      message: 'Status updated successfully'\n    });\n  }\n}\n\nexport default OrderControllers;"]}