{"version":3,"sources":["OrdersSpec.js"],"names":["expect","chai","use","chaiHttp","describe","it","done","request","server","get","set","end","error","response","to","have","status","body","message","equal","orders","be","an","order","orderId","userId","foodMenu","totalPrice","dateOrdered","Date","post","send","property","eql","put"],"mappings":"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","file":"OrdersSpec.js","sourceRoot":"/home/dubby/Documents/Tasks/fast-food-fast/Fast-Food-Fast/Api/tests","sourcesContent":["import chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport server from '../server';\n\nimport orders from '../models/orders';\n\nconst {\n  expect\n} = chai;\n\nchai.use(chaiHttp);\n\ndescribe('/GET orders', () => {\n  it('it should GET all orders', (done) => {\n    chai.request(server)\n      .get('/api/v1/orders')\n      .set('Content-Type', 'application/json')\n      .set('Accept', 'application/json')\n      .end((error, response) => {\n        expect(response).to.have.status(200);\n        expect(response.body.message).to.equal('Get all orders is successful');\n        expect(response.body.orders).to.be.an('array');\n        expect(response.body).to.be.an('object');\n        done();\n      });\n  });\n});\n\ndescribe('/GET/orders/:id', () => {\n  it('it should GET an order by the given id', (done) => {\n    chai.request(server)\n      .get('/api/v1/orders/1')\n      .end((error, response) => {\n        expect(response).to.have.status(200);\n        expect(response.body.message).to.equal('Get a specific order is successful');\n        expect(response.body).to.be.an('object');\n        done();\n      });\n  });\n});\n\ndescribe('/POST orders', () => {\n  it('it should add a new order', (done) => {\n    const order = {\n    orderId: 1,\n    userId: 1,\n    foodMenu: [],\n    totalPrice: 2000,\n    dateOrdered: new Date(),\n    status: 'Completed'\n    };\n    chai.request(server)\n      .post('/api/v1/orders')\n      .set('Content-Type', 'application/json')\n      .set('Accept', 'application/json')\n      .send(order)\n      .end((error, response) => {\n        expect(response).to.have.status(201);\n        expect(response.body).to.be.an('object');\n        expect(response.body).to.have.property('message').eql('Orders added successfully');\n        done();\n      });\n  });\n});\n\n\ndescribe('/PUT orders/:id', () => {\n  it('it should UPDATE status of a specific order id', (done) => {\n    const order = {\n      orderId: 4,\n      userId: 3,\n      foodMenu: [],\n      totalPrice: 4000,\n      dateOrdered: '2018-09-12T22:51:15.609Z',\n      status: 'Completed'\n  };\n    chai.request(server)\n      .put('/api/v1/orders/1')\n      .set('Content-Type', 'application/json')\n      .set('Accept', 'application/json')\n      .send(order)\n      .end((error, response) => {\n        expect(response).to.have.status(200);\n        expect(response.body).to.be.an('object');\n        expect(response.body).to.have.property('message').eql('Status updated successfully');\n        done();\n      });\n  });\n\n  it('it should not UPDATE status of a specific order id', (done) => {\n    chai.request(server)\n      .put('/api/v1/orders/6')\n      .set('Content-Type', 'application/json')\n      .set('Accept', 'application/json')\n      .send({ status: 'Completed' })\n      .end((error, response) => {\n        expect(response).to.have.status(404);\n        expect(response.body).to.be.an('object');\n        expect(response.body).to.have.property('message').eql('The status with the given order ID is not found');\n        done();\n      });\n  });\n});"]}