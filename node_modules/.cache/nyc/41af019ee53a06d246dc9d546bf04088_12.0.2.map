{"version":3,"sources":["ValidateOrders.js"],"names":["quantityRegex","totalPriceRegex","quantityErrMessage","totalPriceErrMessage","OrderValidator","passing","errMessage","quantity","checkForNumber","totalPrice","orders","check","Object","values","every","data","resetValid","testForEmptyStringInput","testQuantity","testTotalPrice","obj","err","regex","test"],"mappings":";;;;;;;;;;AAAA,IAAMA,gBAAgB,UAAtB;AACA,IAAMC,kBAAkB,UAAxB;;AAEA,IAAMC,qBAAqB,0DAA3B;AACA,IAAMC,uBAAuB,sDAA7B;;IAEaC,c,WAAAA,c;AACX,4BAAc;AAAA;;AACZ,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,UAAL;AACD;;;;iCAMYC,Q,EAAU;AACrB,UAAIH,eAAeI,cAAf,CAA8BD,QAA9B,EAAwCP,aAAxC,CAAJ,EAA4D;AAC1D,aAAKK,OAAL,GAAe,KAAf;AACA,aAAKC,UAAL,GAAkBJ,kBAAlB;AACD;AACF;;;mCAEcO,U,EAAY;AACzB,UAAIL,eAAeI,cAAf,CAA8BC,UAA9B,EAA0CR,eAA1C,CAAJ,EAAgE;AAC9D,aAAKI,OAAL,GAAe,KAAf;AACA,aAAKC,UAAL,GAAkBH,oBAAlB;AACD;AACF;;;iCAEY;AACX,WAAKE,OAAL,GAAe,IAAf;AACA,WAAKC,UAAL,GAAkB,EAAlB;AACD;;;4CAEuBI,M,EAAQ;AAC9B,UAAIC,QAAQC,OAAOC,MAAP,CAAcH,MAAd,CAAZ;AACAC,cAAQA,MAAMG,KAAN,CAAY;AAAA,eAAQC,SAAS,EAAjB;AAAA,OAAZ,CAAR;AACA,UAAI,CAACJ,KAAL,EAAY;AACV,aAAKN,OAAL,GAAe,KAAf;AACA,aAAKC,UAAL,GAAkB,wBAAlB;AACD;AACF;;;+BAEUI,M,EAAQ;AACjB,WAAKM,UAAL;AACA,WAAKC,uBAAL,CAA6BP,MAA7B;AACA,WAAKQ,YAAL,CAAkBR,OAAOH,QAAzB;AACA,WAAKY,cAAL,CAAoBT,OAAOD,UAA3B;AACA,UAAMW,MAAM;AACVf,iBAAS,KAAKA,OADJ;AAEVgB,aAAK,KAAKf;AAFA,OAAZ;AAIA,aAAOc,GAAP;AACD;;;mCA1CqBL,I,EAAMO,K,EAAO;AACjC,aAAO,CAACA,MAAMC,IAAN,CAAWR,IAAX,CAAD,IAAqB,OAAOA,IAAP,KAAgB,QAA5C;AACD;;;;;;kBA2CYX,c","file":"ValidateOrders.js","sourceRoot":"/home/dubby/Documents/Tasks/fast-food-fast/Fast-Food-Fast/Api/Helpers","sourcesContent":["const quantityRegex = /^[0-9]+$/;\nconst totalPriceRegex = /^[0-9]+$/;\n\nconst quantityErrMessage = 'Quantity must only contain numbers and must not be empty';\nconst totalPriceErrMessage = 'Price must only contain digits and must not be empty';\n\nexport class OrderValidator {\n  constructor() {\n    this.passing = true;\n    this.errMessage;\n  }\n\n  static checkForNumber(data, regex) {\n    return !regex.test(data) || typeof data !== 'number';\n  }\n\n  testQuantity(quantity) {\n    if (OrderValidator.checkForNumber(quantity, quantityRegex)) {\n      this.passing = false;\n      this.errMessage = quantityErrMessage;\n    }\n  }\n\n  testTotalPrice(totalPrice) {\n    if (OrderValidator.checkForNumber(totalPrice, totalPriceRegex)) {\n      this.passing = false;\n      this.errMessage = totalPriceErrMessage;\n    }\n  }\n\n  resetValid() {\n    this.passing = true;\n    this.errMessage = '';\n  }\n\n  testForEmptyStringInput(orders) {\n    let check = Object.values(orders);\n    check = check.every(data => data !== '');\n    if (!check) {\n      this.passing = false;\n      this.errMessage = 'Enter valid input data';\n    }\n  }\n\n  testOrders(orders) {\n    this.resetValid();\n    this.testForEmptyStringInput(orders);\n    this.testQuantity(orders.quantity);\n    this.testTotalPrice(orders.totalPrice);\n    const obj = {\n      passing: this.passing,\n      err: this.errMessage\n    };\n    return obj;\n  }\n}\n\nexport default OrderValidator;"]}