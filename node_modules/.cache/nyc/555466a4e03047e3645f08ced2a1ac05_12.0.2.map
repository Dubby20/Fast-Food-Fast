{"version":3,"sources":["OrderController.js"],"names":["orderValidator","OrderValidator","OrderControllers","request","response","orders","status","send","json","message","getId","find","item","orderId","parseInt","params","id","foodItemsID","foodItems","map","food","foodId","result","testOrders","body","console","log","passing","err","addOrders","length","userId","totalPrice","dateOrdered","Date","push","orderStatus","indexOf"],"mappings":"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","file":"OrderController.js","sourceRoot":"/home/dubby/Documents/Tasks/fast-food-fast/Fast-Food-Fast/Api/controllers","sourcesContent":["import orders from '../models/orders';\nimport food from '../models/food';\nimport user from '../models/user';\nimport {\n  OrderValidator\n} from '../Helpers/ValidateOrders';\n\n/**\n * Creates a new OrderValidator.\n * @class OrderValidator\n */\nconst orderValidator = new OrderValidator();\n\nclass OrderControllers {\n  /**\n   * Gets all the orders\n   * @param {object} request Request object\n   * @param {object} response Response object\n   * @returns {json} List of all orders array\n   * @memberof OrderControllers\n\n   */\n\n  static allOrders(request, response) {\n    if (!orders) return response.status(404).send('No order was found');\n    return response.status(200).json({\n      orders,\n      message: 'Get all orders is successful'\n    });\n  }\n\n  /**\n   * Gets a particular order by id\n   * @param {object} request Request Object with the given order id\n   * @param {object} response Response object\n   * @returns {json} orders object or error message if order is not found\n   * @memberof OrderControllers\n   */\n\n  static getOrderId(request, response) {\n    const getId = orders.find(item => item.orderId === parseInt(request.params.id, 10));\n    if (!getId) {\n      return response.status(404).json({\n        message: 'The order with the given ID was not found'\n      });\n    }\n    const foodItemsID = getId.foodItems.map(item => item.id);\n    const foodItems = foodItemsID.map(id => food.find(item => item.foodId === id));\n    getId.foodItems = foodItems;\n    return response.status(200).json({\n      getId,\n      message: 'Get a specific order is successful'\n    });\n  }\n\n  /**\n   * Adds an order\n   * @param {object} request - Request object\n   * @param {object} response - Response object\n   * @returns {json} Added object\n   * @memberof OrderControllers\n   */\n\n  static postOrders(request, response) {\n    const result = orderValidator.testOrders(request.body);\n    console.log(result);\n    if (!result.passing) {\n      return response.status(400).json({\n        message: result.err\n      });\n    }\n    const addOrders = {\n      orderId: orders.length + 1,\n      userId: request.body.userId,\n      foodItems: request.body.foodItems,\n      totalPrice: request.body.totalPrice,\n      dateOrdered: new Date(),\n      status: request.body.status\n    };\n    orders.push(addOrders);\n    return response.status(201).json({\n      addOrders,\n      message: 'Orders added successfully'\n    });\n  }\n\n  /**\n   * Updates's the status of an order with the given id\n   * @param {object} request Request Object\n   * @param {object} response Response Object\n   * @returns {json} Updated status or error message if order id is not found\n   * @memberof OrderControllers\n   */\n\n  static updateStatus(request, response) {\n    const orderStatus = orders.find(item => item.orderId === parseInt(request.params.id, 10));\n    if (!orderStatus) {\n      return response.status(404).json({\n        message: 'The status with the given order ID is not found'\n      });\n    }\n    const id = orders.indexOf(orderStatus);\n    orderStatus.status = request.body.status;\n    orders[id] = orderStatus;\n    return response.status(200).json({\n      orderStatus,\n      message: 'Status updated successfully'\n    });\n  }\n}\n\nexport default OrderControllers;"]}